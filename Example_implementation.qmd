---
title: Risk sharing
description: balalalbadldb
authors:
  - name: Nicholas Harbour
format: 
  html:
    embed-resources: true
    code-fold: true
    number-sections: true
    toc: true
    toc-depth: 3
    date: now
    date-modified: last-modified
    date-format: "MMMM DD, YYYY, HH:mm:ss"
jupyter: python3
---


```{python}

import numpy as np  
from scipy.optimize import minimize
from scipy.optimize import differential_evolution
import matplotlib.pyplot as plt
import pandas as pd

```


A two-by-two model


linear risk sharing rule 




```{python}

# Data
sd = 0.1
np.random.seed(42)
X1 = np.random.normal(loc=0.1, scale=sd, size=10000)
X2 = np.random.normal(loc=0.7, scale=sd, size=10000)

mu1 = np.mean(X1)
mu2 = np.mean(X2)

# Objective with penalty for constraints
def objective_penalty(params):
    b11, b22 = params

    b = np.array([[b11, 1 - b22],
                  [1 - b11, b22]])
    
    H = b @ np.array([X1, X2])
    
    var_sum = np.var(H)
    
    # Penalize mean constraint violations heavily
    penalty = 1e6 * (abs(np.mean(H[0,:]) - mu1) + abs(np.mean(H[1,:]) - mu2))
    
    return var_sum + penalty

# Bounds for b11, b22
bounds = [(0, 1), (0, 1)]

# Run differential evolution
result = differential_evolution(objective_penalty, bounds, strategy='best1bin', tol=1e-8)

print("Optimal parameters from differential evolution:", result.x)
print("Objective value:", result.fun)

```


We can varify this correct by using the formula

$$
B^* = \frac{1}{n} \vec{1} \vec{1}^T + \frac{1}{\mu^T_X \Sigma^{-1} \mu_X} (1 - \frac{1}{n} \vec{1}\vec{1}^T) \mu_X \mu_X^T \Sigma^{-1}
$$

Where $\mu_X$ is the vector of means and $\Sigma$ is the covariance matrix of the losses.

$$
\Sigma = \begin{pmatrix}
\text{Var}(X_1) & 0 \\
0 & \text{Var}(X_2)
\end{pmatrix}
$$



```{python}


means = np.array([np.mean(X1), np.mean(X2)])
Sigma = np.diag([np.var(X1), np.var(X2)])  # Covariance matrix
# Calculate the optimal parameters using the formula
n = 2  # Number of agents
mu_X = means.reshape(-1, 1)
Sigma_inv = np.linalg.inv(Sigma)
M = mu_X.T @ Sigma_inv @ mu_X
B_star = (1/n) * np.ones((n,n)) + (1/M) * (np.eye(n) - (1/n) * np.ones((n,n))) @ mu_X @ mu_X.T @ Sigma_inv
print("Optimal parameters from formula:\n", B_star[0, 0], B_star[1, 1])
print("Optimal parameters from optimization:\n", result.x)



```


Make a plot for varying differences between means of 2 agents

```{python}


dif_means = np.array([0.25,0.5,0.75,1,1.25,1.5,2,3,5,7])
numeric_res = np.zeros((len(dif_means),2,2))
analytic_res = np.zeros(((len(dif_means)),2,2))

for i in range(len(dif_means)):
    X1 = np.random.normal(loc=0.1, scale=sd, size=10000)
    X2 = np.random.normal(loc=0.1 * dif_means[i], scale=sd, size=10000)
    
    mu1 = np.mean(X1)
    mu2 = np.mean(X2)


    bounds = [(0, 1), (0, 1)]
    ans = differential_evolution(objective_penalty, bounds, strategy='best1bin', tol=1e-8)
    numeric_res[i, :, :] = ans.x

    means = np.array([np.mean(X1), np.mean(X2)])
    Sigma = np.diag([np.var(X1), np.var(X2)])  # Covariance matrix
    # Calculate the optimal parameters using the formula
    n = 2  # Number of agents
    mu_X = means.reshape(-1, 1)
    Sigma_inv = np.linalg.inv(Sigma)
    M = mu_X.T @ Sigma_inv @ mu_X
    analytic_res[i] = (1/n) * np.ones((n,n)) + (1/M) * (np.eye(n) - (1/n) * np.ones((n,n))) @ mu_X @ mu_X.T @ Sigma_inv

    



```


make plot

```{python}

fig, ax = plt.subplots(1,2, figsize=(12, 6))

fs = 18

ax[0].plot(dif_means, numeric_res[:,0,0], label='Numeric', marker='o')
ax[0].plot(dif_means, analytic_res[:,0,0], label='Analytic', marker='x', linestyle='--')
#ax[0].legend()
ax[0].set_xlabel('Difference in Means', fontsize = fs)
ax[0].set_ylabel('Optimal  $\\alpha_{1,1}$', fontsize = fs)
ax[0].tick_params(axis='both', labelsize=fs)
#ax[0].set_title('Optimal $\\alpha_{1,1}$ vs Difference in Means')

ax[1].plot(dif_means, numeric_res[:,1,1], label='Numeric', marker='o')
ax[1].plot(dif_means, analytic_res[:,1,1], label='Analytic', marker='x', linestyle='--')
ax[1].legend()
ax[1].set_xlabel('Difference in Means', fontsize = fs)
ax[1].set_ylabel('Optimal  $\\alpha_{2,2}$', fontsize = fs)
ax[1].tick_params(axis='both', labelsize=fs)

#ax[1].set_title('Optimal $\\alpha_{1,1}$ for different means')
plt.tight_layout()
plt.show()




```